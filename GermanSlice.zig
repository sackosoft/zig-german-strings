const std = @import("std");
const Alloc = std.mem.Allocator;
const T = std.testing;

const ContentSize: usize = 12;
const ContentPrefixSize = ContentSize - @sizeOf([*]u8);
const Content = packed union {
    value: @Vector(ContentSize, u8),
    reference: packed struct {
        ptr: [*]u8,
        prefix: @Vector(ContentSize - @sizeOf([*]u8), u8),
    },
};

pub const GermanSlice = packed struct {
    len: u32,
    content: Content,

    pub const InitError = error{TooLong} || Alloc.Error;
    pub fn init(alloc: Alloc, data: []const u8) InitError!GermanSlice {
        if (data.len > std.math.maxInt(u32)) {
            return error.TooLong;
        }

        if (data.len <= ContentSize) {
            var value_content: [ContentSize]u8 = @splat(0);
            @memcpy(value_content[0..data.len], data);
            return .{
                .len = @intCast(data.len),
                .content = .{
                    .value = value_content,
                },
            };
        }

        var prefix: [ContentPrefixSize]u8 = @splat(0);
        @memcpy(prefix[0..ContentPrefixSize], data[0..ContentPrefixSize]);

        const copy = try alloc.dupe(u8, data[ContentPrefixSize..]);
        return .{
            .len = @intCast(data.len),
            .content = .{ .reference = .{
                .ptr = copy.ptr,
                .prefix = prefix,
            } },
        };
    }

    pub fn deinit(this: *GermanSlice, alloc: Alloc) void {
        if (this.len <= ContentSize) {
            return;
        }

        alloc.free(this.content.reference.ptr[0 .. this.len - ContentPrefixSize]);
    }

    pub fn eql(this: GermanSlice, other: GermanSlice) bool {
        if (this.len != other.len) {
            return false;
        }

        if (this.len <= ContentSize) {
            return @reduce(.And, this.content.value == other.content.value);
        }

        if (@reduce(.Or, this.content.reference.prefix != other.content.reference.prefix)) {
            return false;
        }

        const this_heap_slice = this.content.reference.ptr[0 .. this.len - ContentPrefixSize];
        const other_heap_slice = other.content.reference.ptr[0 .. this.len - ContentPrefixSize];
        return std.mem.eql(u8, this_heap_slice, other_heap_slice);
    }
};

test "Content should pack nicely within the user facing struct." {
    try std.testing.expectEqual(16, @sizeOf(@Vector(12, u8)));
    try std.testing.expectEqual(16, @sizeOf(Content));
    try std.testing.expectEqual(16, @sizeOf(GermanSlice));
}

test {
    var gs1: GermanSlice = try .init(T.allocator, "");
    var gs2: GermanSlice = try .init(T.allocator, "");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init(T.allocator, "a");
    gs2 = try .init(T.allocator, "A");
    try T.expect(!gs1.eql(gs2));

    gs1 = try .init(T.allocator, "\x00");
    gs2 = try .init(T.allocator, "\x00");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init(T.allocator, "\x00A");
    gs2 = try .init(T.allocator, "\x00A");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init(T.allocator, "\x00A");
    gs2 = try .init(T.allocator, "\x00B");
    try T.expect(!gs1.eql(gs2));
}

test {
    var gs1: GermanSlice = try .init(T.allocator, "44444444444444444444");
    var gs2: GermanSlice = try .init(T.allocator, "44444444444444444444");
    try T.expect(gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);
}

test {
    var gs1: GermanSlice = try .init(T.allocator, "hello");
    var gs2: GermanSlice = try .init(T.allocator, "hello");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init(T.allocator, "123456789012");
    gs2 = try .init(T.allocator, "123456789012");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init(T.allocator, "hello");
    gs2 = try .init(T.allocator, "hallo");
    try T.expect(!gs1.eql(gs2));

    gs1 = try .init(T.allocator, "123456789012");
    gs2 = try .init(T.allocator, "123456789013");
    try T.expect(!gs1.eql(gs2));
}

test {
    var gs1: GermanSlice = try .init(T.allocator, "Hello, world!" ** 32);
    var gs2: GermanSlice = try .init(T.allocator, "Hello, world!" ** 32);
    try T.expect(gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);

    gs1 = try .init(T.allocator
    gs2 = try .init(T.allocator
    try T.expect(!gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);

    gs1 = try .init(T.allocator
    gs2 = try .init(T.allocator
    try T.expect(!gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);

    gs1 = try .init(T.allocator
    gs2 = try .init(T.allocator
    try T.expect(!gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);
}
