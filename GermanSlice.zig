const std = @import("std");
const Alloc = std.mem.Allocator;
const T = std.testing;

const ContentSize: usize = 12;
const ContentPrefixSize = ContentSize - @sizeOf([*]u8);
const Content = packed union {
    value: @Vector(ContentSize, u8),
    reference: packed struct {
        ptr: [*]const u8,
        prefix: @Vector(ContentSize - @sizeOf([*]u8), u8),
    },
};

pub const GermanSlice = packed struct {
    const LengthT = u31;

    is_allocated: bool,
    len: LengthT,
    content: Content,

    pub const InitError = error{TooLong} || Alloc.Error;
    pub fn init(data: []const u8) InitError!GermanSlice {
        try validate(data);
        if (data.len <= ContentSize) {
            return initValueSlice(data);
        } else {
            return initSlice(data);
        }
    }

    pub fn initAlloc(alloc: Alloc, data: []const u8) InitError!GermanSlice {
        try validate(data);
        if (data.len <= ContentSize) {
            return initValueSlice(data);
        } else {
            return try initSliceAlloc(alloc, data);
        }
    }

    fn validate(data: []const u8) error{TooLong}!void {
        if (data.len > std.math.maxInt(LengthT)) {
            return error.TooLong;
        }
    }

    inline fn initValueSlice(data: []const u8) GermanSlice {
        var value_content: [ContentSize]u8 = @splat(0);
        @memcpy(value_content[0..data.len], data);
        return .{
            .is_allocated = false,
            .len = @intCast(data.len),
            .content = .{
                .value = value_content,
            },
        };
    }

    inline fn initSlice(data: []const u8) GermanSlice {
        var prefix: [ContentPrefixSize]u8 = @splat(0);
        @memcpy(prefix[0..ContentPrefixSize], data[0..ContentPrefixSize]);
        return .{
            .is_allocated = false,
            .len = @intCast(data.len),
            .content = .{
                .reference = .{
                    .ptr = data[ContentPrefixSize..].ptr,
                    .prefix = prefix,
                },
            },
        };
    }

    inline fn initSliceAlloc(alloc: Alloc, data: []const u8) Alloc.Error!GermanSlice {
        var prefix: [ContentPrefixSize]u8 = @splat(0);
        @memcpy(prefix[0..ContentPrefixSize], data[0..ContentPrefixSize]);
        const copy = try alloc.dupe(u8, data[ContentPrefixSize..]);
        return .{
            .is_allocated = true,
            .len = @intCast(data.len),
            .content = .{
                .reference = .{
                    .ptr = copy.ptr,
                    .prefix = prefix,
                },
            },
        };
    }

    pub fn deinit(this: *GermanSlice, alloc: Alloc) void {
        if (!this.is_allocated) {
            return;
        }

        alloc.free(this.content.reference.ptr[0 .. this.len - ContentPrefixSize]);
    }

    pub fn eql(this: GermanSlice, other: GermanSlice) bool {
        if (this.len != other.len) {
            return false;
        }

        if (this.len <= ContentSize) {
            return @reduce(.And, this.content.value == other.content.value);
        }

        if (@reduce(.Or, this.content.reference.prefix != other.content.reference.prefix)) {
            return false;
        }

        const this_heap_slice = this.content.reference.ptr[0 .. this.len - ContentPrefixSize];
        const other_heap_slice = other.content.reference.ptr[0 .. this.len - ContentPrefixSize];
        return std.mem.eql(u8, this_heap_slice, other_heap_slice);
    }
};

test "Content should pack nicely within the user facing struct." {
    try std.testing.expectEqual(16, @sizeOf(@Vector(12, u8)));
    try std.testing.expectEqual(16, @sizeOf(Content));
    try std.testing.expectEqual(16, @sizeOf(GermanSlice));
}

test "init(): short and special cases" {
    var gs1: GermanSlice = try .init("");
    var gs2: GermanSlice = try .init("");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init("a");
    gs2 = try .init("A");
    try T.expect(!gs1.eql(gs2));

    gs1 = try .init("\x00");
    gs2 = try .init("\x00");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init("\x00A");
    gs2 = try .init("\x00A");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init("\x00A");
    gs2 = try .init("\x00B");
    try T.expect(!gs1.eql(gs2));
}

test "initAlloc(): short and special cases" {
    var gs1: GermanSlice = try .initAlloc(T.allocator, "");
    var gs2: GermanSlice = try .initAlloc(T.allocator, "");
    try T.expect(gs1.eql(gs2));

    gs1 = try .initAlloc(T.allocator, "a");
    gs2 = try .initAlloc(T.allocator, "A");
    try T.expect(!gs1.eql(gs2));

    gs1 = try .initAlloc(T.allocator, "\x00");
    gs2 = try .initAlloc(T.allocator, "\x00");
    try T.expect(gs1.eql(gs2));

    gs1 = try .initAlloc(T.allocator, "\x00A");
    gs2 = try .initAlloc(T.allocator, "\x00A");
    try T.expect(gs1.eql(gs2));

    gs1 = try .initAlloc(T.allocator, "\x00A");
    gs2 = try .initAlloc(T.allocator, "\x00B");
    try T.expect(!gs1.eql(gs2));
}

test "init(): short normal cases" {
    var gs1: GermanSlice = try .init("hello");
    var gs2: GermanSlice = try .init("hello");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init("44444444444444444444");
    gs2 = try .init("44444444444444444444");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init("123456789012");
    gs2 = try .init("123456789012");
    try T.expect(gs1.eql(gs2));

    gs1 = try .init("hello");
    gs2 = try .init("hallo");
    try T.expect(!gs1.eql(gs2));

    gs1 = try .init("123456789012");
    gs2 = try .init("123456789013");
    try T.expect(!gs1.eql(gs2));
}

test "initAlloc(): short normal cases" {
    var gs1: GermanSlice = try .initAlloc(T.allocator, "hello");
    var gs2: GermanSlice = try .initAlloc(T.allocator, "hello");
    try T.expect(gs1.eql(gs2));

    gs1 = try .initAlloc(T.allocator, "44444444444444444444");
    gs2 = try .initAlloc(T.allocator, "44444444444444444444");
    try T.expect(gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);

    gs1 = try .initAlloc(T.allocator, "123456789012");
    gs2 = try .initAlloc(T.allocator, "123456789012");
    try T.expect(gs1.eql(gs2));

    gs1 = try .initAlloc(T.allocator, "hello");
    gs2 = try .initAlloc(T.allocator, "hallo");
    try T.expect(!gs1.eql(gs2));

    gs1 = try .initAlloc(T.allocator, "123456789012");
    gs2 = try .initAlloc(T.allocator, "123456789013");
    try T.expect(!gs1.eql(gs2));
}

test "init(): longer cases" {
    var gs1: GermanSlice = try .init("Hello, world!" ** 32);
    var gs2: GermanSlice = try .init("Hello, world!" ** 32);
    try T.expect(gs1.eql(gs2));

    gs1 = try .init
    gs2 = try .init
    try T.expect(!gs1.eql(gs2));

    gs1 = try .init
    gs2 = try .init
    try T.expect(!gs1.eql(gs2));

    gs1 = try .init
    gs2 = try .init
    try T.expect(!gs1.eql(gs2));

    gs1 = try .init
    gs2 = try .init
    try T.expect(!gs1.eql(gs2));
}

test "initAlloc(): longer cases" {
    var gs1: GermanSlice = try .initAlloc(T.allocator, "Hello, world!" ** 32);
    var gs2: GermanSlice = try .initAlloc(T.allocator, "Hello, world!" ** 32);
    try T.expect(gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);

    gs1 = try .initAlloc(T.allocator
    gs2 = try .initAlloc(T.allocator
    try T.expect(!gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);

    gs1 = try .initAlloc(T.allocator
    gs2 = try .initAlloc(T.allocator
    try T.expect(!gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);

    gs1 = try .initAlloc(T.allocator
    gs2 = try .initAlloc(T.allocator
    try T.expect(!gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);

    gs1 = try .initAlloc(T.allocator
    gs2 = try .initAlloc(T.allocator
    try T.expect(!gs1.eql(gs2));
    gs1.deinit(T.allocator);
    gs2.deinit(T.allocator);
}
